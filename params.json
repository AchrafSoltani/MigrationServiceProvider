{"name":"Migrationserviceprovider","tagline":"Simple Doctrine2 migration manager for Silex -- based on KnpLabs/MigrationServiceProvider, Upgrading to the latest Doctrine DBAL version-- maintained by AchrafSoltani","body":"# MigrationServiceProvider\r\n\r\n[![Latest Stable Version](https://poser.pugx.org/achrafsoltani/migration-service-provider/v/stable)](https://packagist.org/packages/achrafsoltani/migration-service-provider)\r\n[![Total Downloads](https://poser.pugx.org/achrafsoltani/migration-service-provider/downloads)](https://packagist.org/packages/achrafsoltani/migration-service-provider)\r\n[![License](https://poser.pugx.org/achrafsoltani/migration-service-provider/license)](https://packagist.org/packages/achrafsoltani/migration-service-provider)\r\n\r\nThis is a simple homebrew schema migration system for silex and doctrine.\r\n\r\n## Install\r\n\r\nInstallation\r\n------------ \r\n```sh\r\n$ composer require achrafsoltani/migration-service-provider\r\n```\r\nSetup\r\n------------\r\n``` {.php}\r\nrequire_once __DIR__.'/vendor/autoload.php';\r\n\r\nuse Silex\\Application;\r\nuse Silex\\Provider\\DoctrineServiceProvider;\r\nuse Gridonic\\Provider\\ConsoleServiceProvider;\r\nuse AchrafSoltani\\Provider\\MigrationServiceProvider;\r\n\r\n$app = new Application();\r\n\r\n$app->register(new Silex\\Provider\\DoctrineServiceProvider(), array(\r\n    'db.options' => array(\r\n        // db options\r\n    ),\r\n));\r\n\r\n$app->register(new ConsoleServiceProvider(), array(\r\n    // console options\r\n));\r\n\r\n// Usage\r\n\r\n$app->run();\r\n```\r\n\r\n```php\r\n$app->register(new MigrationServiceProvider(), array(\r\n    'migration.path' => __DIR__.'/../src/Resources/migrations',\r\n    'migration.register_before_handler' => true,\r\n    'migration.migrations_table_name'   => 'migration_version',\r\n));\r\n```\r\n\r\n| Key | Type | Optional | Description |\r\n| --- | --- | --- | --- |\r\n| `migrations.path` | String/Array | - | Path or array of paths to migrations |\r\n| `migrations.register_before_handler` | Boolean | x | Should the service run the migrations on each boot? |\r\n| `migrations.migrations_table_name` | String | x | The name of the table in the database, where the migration_version is safed. Default `schema_version` |\r\n\r\n## Running migrations\r\n\r\nThere are two ways of running migrations\r\n\r\n### Using the `before` handler\r\n\r\nIf you pass a `migration.register_before_handler` (set to `true`) when registering the service, then a `before` handler will be registered for migration to be run. It means that the migration manager will be run for each hit to your application.\r\n\r\nYou might want to enable this behavior for development mode, but please don't do that in production!\r\n\r\n### Using the `migration:migrate` command\r\n\r\nIf you installed the console service provider right, you can use the `migration:migrate` command, so your app does not have to run the migrations each time when your web-Application is called.\r\n\r\n## Writing migrations\r\n\r\nA migration consist of a single file, holding a migration class. By design, the migration file must be named something like `<version>_<migration_name>Migration.php` and located in `src/Resources/migrations`, and the class `<migration_name>Migration`. For example, if your migration adds a `bar` field to the `foo` table, and is the 5th migration of your schema, you should name your file `05_FooBarMigration.php`, and the class would be named `FooBarMigration`.\r\n\r\nIn addition to these naming conventions, your migration class must extends `Gridonic\\Migration\\AbstractMigration`, which provides a few helping method such as `getVersion` and default implementations for migration methods.\r\n\r\nThe migration methods consist of 4 methods, which are called in this order:\r\n\r\n* `schemaUp`\r\n* `appUp`\r\n* `schemaDown`\r\n* `appDown`\r\n\r\n### schemaUp\r\nYou get a `Doctrine\\DBAL\\Schema\\Schema` instance where you can add, remove or modify the schema of your database.\r\n\r\n### appUp\r\nAfter the `schemaUp`, you can edit the application - you get a `Silex\\Application` instance for that. Here you can modify existing data after you have added a column.\r\n\r\n### schemaDown\r\nAfter the `appUp`, you can modify the schema of your database again. You get a `Doctrine\\DBAL\\Schema\\Schema` instance which you can use.\r\n\r\n### appDown\r\nLast but not least, you can work again with a `Silex\\Application` instance. Modify the existing data or something like this.\r\n\r\n## Migration infos\r\n\r\nThere's one last method you should know about: `getMigrationInfos`. This method should return a self-explanatory description of the migration (it is optional though, and you can skip its implementation).\r\nIf you use [Twig](http://twig.sensiolabs.org/), we have built in a `migration_infos` for twig - perhaps a function just for the developer-mode.\r\n\r\nYou can then use it with something like that:\r\n\r\n```html\r\n      Migration informations: {{ migration_infos }}\r\n```\r\n\r\nFull API documentation\r\n------------\r\n* [The official documentation for Doctrine's DBAL Schema Manager](http://readthedocs.org/docs/doctrine-dbal/en/latest/reference/schema-manager.html)\r\n* [Original `KnpLabs\\migration-service-provider`](https://github.com/KnpLabs/MigrationServiceProvider)\r\n* [Original `Gridonic\\migration-service-provider`](https://github.com/gridonic/MigrationServiceProvider)\r\n\r\n## Licence\r\nThe MigrationServiceProvider is licensed under the MIT license.\r\nThe original library from is taken from the [KnpLabs](https://github.com/KnpLabs/MigrationServiceProvider).","google":"UA-63372767-1","note":"Don't delete this file! It's used internally to help with page regeneration."}